# # Example schema for simple movie review app

# # Users
# # Suppose a user can leave reviews for movies
# # user  -> reviews is a one to many relationship,
# # movie -> reviews is a one to many relationship
# # movie <-> user is a many to many relationship
type User
  @table(name: "Users", singular: "user", plural: "users", key: ["id"]) {
  id: UUID! @col(name: "user_id") @default(expr: "uuidV4()")
  auth: String @col(name: "user_auth") @default(expr: "uuidV4()")
  username: String! @col(name: "username", dataType: "varchar(30)")
  password: String! @col(name: "password", dataType: "varchar(30)")
  role:String! @col(name: "role", dataType: "varchar(30)")
  createAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

type Employee
  @table(name: "Employees", singular: "employee", plural: "employes", key: ["id"]) {
  id: UUID! @col(name: "employee_id") @default(expr: "uuidV4()")
  firstName: String! @col(name: "first_name", dataType: "varchar(30)")
  lastName: String! @col(name: "last_name", dataType: "varchar(30)")
  email: String @col(name: "email", dataType: "varchar(30)")
  phoneNumber: String @col(name: "phone_number", dataType: "varchar(30)")
  hireDate: Date! @col(name: "created_at") 
  jobTitle: String! @col(name: "job_title", dataType: "varchar(30)")
  salary: Float @col(name: "salary")
  user: User @ref
  createAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}


type Client
  @table(name: "Clients", singular: "client", plural: "clients", key: ["id"]) {
  id: UUID! @col(name: "client_id") @default(expr: "uuidV4()")
  FirstName: String! @col(name: "first_name", dataType: "varchar(30)")
  lastName: String! @col(name: "last_name", dataType: "varchar(30)")
  email: String @col(name: "email", dataType: "varchar(30)")
  phoneNumber: String @col(name: "phone_number", dataType: "varchar(30)")
  address: String @col(name: "address", dataType: "varchar(30)")
  createAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

type Pet
  @table(name: "Pets", singular: "pet", plural: "pets", key: ["id", "client"]) {
  id: UUID! @col(name: "pet_id") @default(expr: "uuidV4()")
  name: String! @col(name: "pet_name", dataType: "varchar(30)")
  species: String @col(name: "species", dataType: "varchar(30)")
  breed: String @col(name: "breed", dataType: "varchar(30)")
  commentaries: String @col(name: "commentaries", dataType: "varchar(30)")
  client: Client! @ref
  createAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

type Service
  @table(name: "Services", singular: "service", plural: "services", key: ["id", "name"]) {
  id: UUID! @col(name: "service_id") @default(expr: "uuidV4()")
  name: String! @col(name: "service_name", dataType: "varchar(30)")
  description: String @col(name: "description", dataType: "varchar(30)")
  price: Float! @col(name: "price")
  createAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

type Schedule
  @table(name: "Schedule", key: ["id", "date", "pet", "service"]) {
  id: UUID! @col(name: "schedule_id") @default(expr: "uuidV4()")
  date: Timestamp! @col(name: "schedule_date") @default(expr: "request.time")
  endDate: Timestamp @col(name: "end_date") @default(expr: "request.time")
  pet: Pet! @ref
  service: Service! @ref
  employee: Employee! @ref
  createAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

type Sale
  @table(name: "Sales", singular: "sale", plural: "sales", key:["id"]) {
  id: UUID! @col(name: "sale_id") @default(expr: "uuidV4()")
  date: Timestamp! @col(name: "sale_date")
  total: Float! @col(name: "total_price")
  services: [Service!]! 
  client: Client! @ref
  employee: Employee! @ref
  createAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

type Stock
  @table(name: "Stock", key:["id"]) {
  id: UUID! @col(name: "stock_id") @default(expr: "uuidV4()")
  product: String! @col(name: "product_name", dataType: "varchar(30)")
  description: String @col(name: "description", dataType: "varchar(30)")
  quantity: Int! @col(name: "item_quantity")
  price: Float @col(name: "unit_price")
  createAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}


# Movies
type Movie @table {
  # The below parameter values are generated by default with @table, and can be edited manually.
  # implies directive `@col(name: "movie_id")`, generating a column name
  id: UUID! @default(expr: "uuidV4()")
  title: String!
  imageUrl: String!
  genre: String
}

# Movie Metadata
# Movie - MovieMetadata is a one-to-one relationship
type MovieMetadata @table {
  # @unique indicates a 1-1 relationship
  movie: Movie! @unique 
  # movieId: UUID <- this is created by the above reference
  rating: Float
  releaseYear: Int
  description: String
}

# Reviews
type Review @table(name: "Reviews", key: ["movie", "user"]) {
  id: UUID! @default(expr: "uuidV4()")
  user: User!
  movie: Movie!
  rating: Int
  reviewText: String
  reviewDate: Date! @default(expr: "request.time")
}
